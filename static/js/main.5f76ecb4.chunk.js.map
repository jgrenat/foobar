{"version":3,"sources":["use-world.ts","RobotCard.tsx","use-interval.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RobotState","RobotJob","useWorld","initialRobots","defaultInitialRobots","useMemo","toRobotMap","newRobot","useState","foobarCount","fooCount","barCount","robots","lastHandledFrame","world","setWorld","Array","from","values","resources","changeRobotJob","id","newJob","robot","get","job","updatedRobots","Map","set","Switching","targetJob","state","Idle","newWorld","isDone","length","tick","delay","frame","afterFinishingTasks","reduce","reducedWorld","Working","jobEndTime","updateRobot","undefined","MiningFoo","MiningBar","AssemblingFoobar","worldWithNewRobot","Math","random","BuyingRobot","endRobotTaskIfPossible","getRobots","getJobTimeInMs","robotsToBuy","floor","min","forEach","startRobotTaskIfPossible","nanoid","newRobots","map","newRobotsMap","getState","RobotCard","number","changeJob","className","onChange","target","value","useInterval","callback","savedCallback","useRef","useEffect","current","setInterval","clearInterval","App","performance","now","setLastHandledFrame","aria-live","aria-valuenow","aria-valuemin","aria-valuemax","index","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.5f76ecb4.chunk.js","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useMemo, useState } from \"react\";\n\ntype World = {\n  foobarCount: number;\n  fooCount: number;\n  barCount: number;\n  robots: Map<RobotId, Robot>;\n};\n\nexport type RobotId = string;\n\ntype WorkingRobot = { state: RobotState.Working; jobEndTime: number };\ntype IdleRobot = { state: RobotState.Idle };\n\ntype SwitchingRobot = { job: RobotJob.Switching; targetJob: Exclude<RobotJob, RobotJob.Switching> };\ntype OtherJobRobot = { job: Exclude<RobotJob, RobotJob.Switching> };\n\nexport type Robot = {\n  id: RobotId;\n} & (SwitchingRobot | OtherJobRobot) &\n  (WorkingRobot | IdleRobot);\n\nexport enum RobotState {\n  Idle,\n  Working,\n}\n\nexport enum RobotJob {\n  Switching = \"switching\",\n  MiningFoo = \"miningFoo\",\n  MiningBar = \"miningBar\",\n  AssemblingFoobar = \"assemblingFoobar\",\n  BuyingRobot = \"buyingRobot\",\n}\n\nexport function useWorld(initialRobots?: Robot[]) {\n  const defaultInitialRobots = useMemo(() => toRobotMap([newRobot(), newRobot()]), []);\n\n  const [world, setWorld] = useState({\n    foobarCount: 0,\n    fooCount: 0,\n    barCount: 0,\n    robots: initialRobots ? toRobotMap(initialRobots) : defaultInitialRobots,\n    lastHandledFrame: 0,\n  });\n\n  function changeRobotJob(id: RobotId, newJob: Exclude<RobotJob, RobotJob.Switching>) {\n    const robot = world.robots.get(id);\n    if (!robot || robot.job === newJob) {\n      return;\n    }\n    const updatedRobots = new Map(world.robots);\n    updatedRobots.set(id, { ...robot, job: RobotJob.Switching, targetJob: newJob, state: RobotState.Idle });\n    const newWorld = { ...world, robots: updatedRobots };\n    setWorld(newWorld);\n  }\n\n  const robots = Array.from(world.robots.values());\n  const resources = {\n    foobarCount: world.foobarCount,\n    fooCount: world.fooCount,\n    barCount: world.barCount,\n  };\n\n  function tick(delay: number) {\n    if (robots.length >= 20) {\n      return;\n    }\n    const frame = world.lastHandledFrame + delay;\n    const afterFinishingTasks = robots.reduce((reducedWorld: World, robot) => {\n      return endRobotTaskIfPossible(robot, reducedWorld, frame);\n    }, world);\n    const newWorld = getRobots(afterFinishingTasks).reduce((reducedWorld: World, robot) => {\n      return startRobotTaskIfPossible(robot, reducedWorld, frame);\n    }, afterFinishingTasks);\n    setWorld({ ...newWorld, lastHandledFrame: frame });\n  }\n\n  return { robots, resources, changeRobotJob, isDone: robots.length >= 20, tick };\n}\n\nexport function newRobot(): Robot {\n  return { id: nanoid(), state: RobotState.Idle, job: RobotJob.MiningFoo };\n}\n\nfunction getRobots(world: World): Robot[] {\n  return Array.from(world.robots.values());\n}\n\nfunction endRobotTaskIfPossible(robot: Robot, world: World, frame: number): World {\n  if (robot.state !== RobotState.Working) {\n    return world;\n  }\n  switch (robot.job) {\n    case RobotJob.Switching:\n      if (robot.jobEndTime <= frame) {\n        const newRobot = { ...robot, job: robot.targetJob, state: RobotState.Idle, targetJob: undefined };\n        return updateRobot(newRobot, world);\n      }\n      return world;\n    case RobotJob.MiningFoo:\n      if (robot.jobEndTime <= frame) {\n        const newRobot = { ...robot, state: RobotState.Idle };\n        return { ...updateRobot(newRobot, world), fooCount: world.fooCount + 1 };\n      }\n      return world;\n    case RobotJob.MiningBar:\n      if (robot.jobEndTime <= frame) {\n        const newRobot = { ...robot, state: RobotState.Idle };\n        return { ...updateRobot(newRobot, world), barCount: world.barCount + 1 };\n      }\n      return world;\n    case RobotJob.AssemblingFoobar:\n      if (robot.jobEndTime > frame) {\n        return world;\n      }\n      const worldWithNewRobot = updateRobot({ ...robot, state: RobotState.Idle }, world);\n      const isSuccess = Math.random() <= 0.6;\n      if (isSuccess) {\n        return { ...worldWithNewRobot, foobarCount: worldWithNewRobot.foobarCount + 1 };\n      } else {\n        return { ...worldWithNewRobot, barCount: worldWithNewRobot.barCount + 1 };\n      }\n    case RobotJob.BuyingRobot:\n    default:\n      return world;\n  }\n}\n\nfunction startRobotTaskIfPossible(robot: Robot, world: World, frame: number): World {\n  if (robot.state !== RobotState.Idle) {\n    return world;\n  }\n  switch (robot.job) {\n    case RobotJob.Switching:\n    case RobotJob.MiningFoo:\n    case RobotJob.MiningBar:\n      const jobEndTime = frame + getJobTimeInMs(robot.job);\n      return updateRobot({ ...robot, state: RobotState.Working, jobEndTime }, world);\n    case RobotJob.AssemblingFoobar:\n      if (world.fooCount >= 1 && world.barCount >= 1) {\n        const jobEndTime = frame + getJobTimeInMs(robot.job);\n        const newWorld = updateRobot({ ...robot, state: RobotState.Working, jobEndTime }, world);\n        return { ...newWorld, fooCount: world.fooCount - 1, barCount: world.barCount - 1 };\n      }\n      return world;\n    case RobotJob.BuyingRobot:\n      const robotsToBuy = Math.floor(Math.min(world.foobarCount / 3, world.fooCount / 6));\n      const updatedRobots = new Map(world.robots);\n      Array.from(new Array(robotsToBuy), newRobot).forEach((robot) => updatedRobots.set(robot.id, robot));\n      return {\n        ...world,\n        robots: updatedRobots,\n        foobarCount: world.foobarCount - robotsToBuy * 3,\n        fooCount: world.fooCount - robotsToBuy * 6,\n      };\n  }\n}\n\nfunction updateRobot(newRobot: Robot, world: World) {\n  const newRobots = Array.from(world.robots.values()).map((robot) => {\n    if (robot.id === newRobot.id) {\n      return newRobot;\n    }\n    return robot;\n  });\n  const newRobotsMap = new Map(newRobots.map((robot) => [robot.id, robot]));\n  return { ...world, robots: newRobotsMap };\n}\n\nfunction getJobTimeInMs(job: RobotJob): number {\n  switch (job) {\n    case RobotJob.Switching:\n      return 5000;\n    case RobotJob.MiningFoo:\n      return 1000;\n    case RobotJob.MiningBar:\n      return Math.random() * (2000 - 500) + 500;\n    case RobotJob.AssemblingFoobar:\n      return 2000;\n    case RobotJob.BuyingRobot:\n      return 0;\n  }\n}\n\nfunction toRobotMap(robots: Robot[]): Map<RobotId, Robot> {\n  return new Map(robots.map(robot => [robot.id, robot]));\n}\n","import { Robot, RobotJob, RobotState } from \"./use-world\";\nimport React from \"react\";\n\ntype RenderProps = {\n  number: number;\n  robot: Robot;\n  changeJob: (job: Exclude<RobotJob, RobotJob.Switching>) => void;\n};\n\nconst RobotCard: React.FC<RenderProps> = ({ number, robot, changeJob }) => {\n  return (\n    <div className={\"robotCard\" + (robot.state === RobotState.Idle ? \" robotCard--idle\" : \"\")}>\n      <h2 className=\"title\">Robot {number}</h2>\n      <dl>\n        <dt>Boulot</dt>\n        <dd>\n          {robot.job === RobotJob.Switching ? (\n            <>En train de changer de boulot...</>\n          ) : (\n            <select onChange={job => changeJob(job.target.value as Exclude<RobotJob, RobotJob.Switching>)} value={robot.job}>\n              <option value={RobotJob.MiningFoo}>Miner du Foo</option>\n              <option value={RobotJob.MiningBar}>Miner du Bar</option>\n              <option value={RobotJob.AssemblingFoobar}>Assembler du FooBar</option>\n              <option value={RobotJob.BuyingRobot}>Acheter des robots</option>\n            </select>\n          )}\n        </dd>\n\n        <dt>Statut</dt>\n        <dd>{getState(robot.state)}</dd>\n      </dl>\n    </div>\n  );\n};\n\nfunction getState(state: RobotState) {\n  switch (state) {\n    case RobotState.Idle:\n      return \"En attente\";\n    case RobotState.Working:\n      return \"Occupé...\";\n  }\n}\n\nexport default RobotCard;\n","import { useRef, useEffect } from 'react'\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback)\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (delay === null) {\n      return\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay)\n\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","import \"./App.css\";\nimport {useWorld} from \"./use-world\";\nimport RobotCard from \"./RobotCard\";\nimport useInterval from \"./use-interval\";\nimport {useState} from \"react\";\n\nconst TICK_DELAY_IN_MS = 100;\n\nfunction App() {\n  const { robots, resources, changeRobotJob, isDone, tick } = useWorld();\n  const [lastHandledFrame, setLastHandledFrame] = useState(performance.now());\n  useInterval(() => {\n    const frame = performance.now()\n    const delay = frame - lastHandledFrame;\n    setLastHandledFrame(frame);\n    tick(delay);\n  }, isDone ? null : TICK_DELAY_IN_MS);\n\n  return (\n    <main>\n      <h1 className=\"mainTitle\">Foobartory</h1>\n\n      {isDone && <p className=\"success\" aria-live=\"assertive\">Bravo, vous avez atteint 20 robots !</p>}\n\n      <aside className=\"resources\">\n        <dl>\n          <dt>Foo</dt>\n          <dd>{resources.fooCount}</dd>\n          <dt>Bar</dt>\n          <dd>{resources.barCount}</dd>\n          <dt>Foobar</dt>\n          <dd>{resources.foobarCount}</dd>\n          <dt>Robots</dt>\n          <dd aria-live=\"polite\" aria-valuenow={robots.length} aria-valuemin={2} aria-valuemax={20}>{robots.length}/20</dd>\n        </dl>\n      </aside>\n\n      <section className=\"robots\">\n        {robots.map((robot, index) => (\n          <RobotCard number={index + 1} key={index} robot={robot} changeJob={(job) => changeRobotJob(robot.id, job)} />\n        ))}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from \"web-vitals/src/types\";\n\nconst reportWebVitals = (onPerfEntry: ReportHandler) => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}